version: '3.8'

services:
  # Backend 服务 - FastAPI 应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3dprint-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - 3dprint-network

  # Frontend 服务 - React SPA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: 3dprint-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - 3dprint-network

  # Redis 服务 - 用作 Celery 消息队列和缓存
  redis:
    image: redis:7-alpine
    container_name: 3dprint-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - 3dprint-network

  # Celery Worker 服务 - 异步任务处理
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3dprint-celery-worker
    restart: unless-stopped
    command: celery -A infrastructure.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - 3dprint-network

  # Flower 服务 - Celery 监控界面(可选)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3dprint-flower
    restart: unless-stopped
    command: celery -A infrastructure.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app/src
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - 3dprint-network

# 数据卷定义
volumes:
  redis_data:
    driver: local
    name: 3dprint-redis-data
  backend_data:
    driver: local
    name: 3dprint-backend-data

# 网络定义
networks:
  3dprint-network:
    name: 3dprint-network
    driver: bridge
