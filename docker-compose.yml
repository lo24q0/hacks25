version: '3.8'

services:
  # Backend 服务 - FastAPI 应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3dprint-backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - APP_ENV=${APP_ENV:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - STORAGE_BACKEND=${STORAGE_BACKEND:-local}
      - STORAGE_LOCAL_PATH=/app/data
      - TEMP_FILE_TTL_HOURS=${TEMP_FILE_TTL_HOURS:-24}
      - MAX_UPLOAD_SIZE_MB=${MAX_UPLOAD_SIZE_MB:-10}
      - MESHY_API_KEY=${MESHY_API_KEY:-}
      - MESHY_API_URL=${MESHY_API_URL:-https://api.meshy.ai}
      - MODEL_GENERATION_TIMEOUT=${MODEL_GENERATION_TIMEOUT:-300}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5173,http://localhost:3000,http://localhost}
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - 3dprint-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend 服务 - React SPA with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
    container_name: 3dprint-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - 3dprint-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 服务 - 用作 Celery 消息队列和缓存
  redis:
    image: redis:7-alpine
    container_name: 3dprint-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - 3dprint-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Celery Worker 服务 - 异步任务处理
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3dprint-celery-worker
    restart: unless-stopped
    command: celery -A infrastructure.tasks.celery_app worker --loglevel=${LOG_LEVEL:-info} --concurrency=2
    environment:
      - APP_ENV=${APP_ENV:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - STORAGE_BACKEND=${STORAGE_BACKEND:-local}
      - STORAGE_LOCAL_PATH=/app/data
      - MESHY_API_KEY=${MESHY_API_KEY:-}
      - MESHY_API_URL=${MESHY_API_URL:-https://api.meshy.ai}
      - MODEL_GENERATION_TIMEOUT=${MODEL_GENERATION_TIMEOUT:-300}
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A infrastructure.tasks.celery_app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - 3dprint-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Flower 服务 - Celery 监控界面(可选,开发环境使用)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3dprint-flower
    restart: unless-stopped
    command: celery -A infrastructure.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app/src
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - 3dprint-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    profiles:
      - monitoring

# 数据卷定义
volumes:
  redis_data:
    driver: local
    name: 3dprint-redis-data
  backend_data:
    driver: local
    name: 3dprint-backend-data

# 网络定义
networks:
  3dprint-network:
    name: 3dprint-network
    driver: bridge
