import logging
import os
from datetime import timedelta
from typing import List

from domain.interfaces.i_slicer import ISlicer, GCodeResult, PrinterProfile, SlicingConfig

logger = logging.getLogger(__name__)


class MockSlicer(ISlicer):
    """
    Mock切片引擎实现(用于测试和开发)
    
    在没有实际CuraEngine的情况下提供模拟切片功能
    """

    def __init__(self):
        self._printers = self._init_printers()

    def _init_printers(self) -> List[PrinterProfile]:
        """
        初始化支持的打印机配置
        
        Returns:
            List[PrinterProfile]: 打印机配置列表
        """
        return [
            PrinterProfile(
                id="bambu_h2d",
                name="Bambu H2D",
                bed_size=(256, 256, 256),
                nozzle_diameter=0.4,
                filament_diameter=1.75,
                max_speed=500,
                firmware_flavor="bambu"
            )
        ]

    async def slice_model(
        self,
        stl_path: str,
        printer: PrinterProfile,
        config: SlicingConfig,
        output_path: str
    ) -> GCodeResult:
        """
        模拟切片模型生成G-code
        
        Args:
            stl_path: STL文件路径
            printer: 打印机配置
            config: 切片配置
            output_path: 输出G-code路径
            
        Returns:
            GCodeResult: 生成结果
            
        Raises:
            FileNotFoundError: 如果STL文件不存在
            ValueError: 如果配置无效
        """
        if not os.path.exists(stl_path):
            raise FileNotFoundError(f"STL file not found: {stl_path}")
        
        if not config.validate():
            raise ValueError("Invalid slicing configuration")
        
        logger.info(f"Mock slicing: {stl_path} -> {output_path}")
        
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        with open(output_path, 'w') as f:
            f.write(f"; Generated by MockSlicer\n")
            f.write(f"; Printer: {printer.name}\n")
            f.write(f"; Layer height: {config.layer_height}mm\n")
            f.write(f"; Infill: {config.infill_density}%\n")
            f.write(f"G28 ; Home all axes\n")
            f.write(f"G1 Z0.3 F3000 ; Move to first layer\n")
            f.write(f"M109 S200 ; Wait for hotend temp\n")
            f.write(f"M190 S60 ; Wait for bed temp\n")
            for i in range(100):
                f.write(f"G1 X{i} Y{i} E{i*0.1} ; Layer {i}\n")
            f.write(f"M104 S0 ; Turn off hotend\n")
            f.write(f"M140 S0 ; Turn off bed\n")
            f.write(f"G28 X Y ; Home X Y\n")
        
        layer_count = 100
        estimated_time = timedelta(minutes=layer_count * config.layer_height * 2)
        estimated_material = layer_count * config.infill_density / 10.0
        
        return GCodeResult(
            gcode_path=output_path,
            estimated_time=estimated_time,
            estimated_material=estimated_material,
            layer_count=layer_count
        )

    def get_available_printers(self) -> List[PrinterProfile]:
        """
        获取支持的打印机列表
        
        Returns:
            List[PrinterProfile]: 打印机配置列表
        """
        return self._printers

    def get_default_config(self, printer_id: str) -> SlicingConfig:
        """
        获取指定打印机的默认切片配置
        
        Args:
            printer_id: 打印机ID
            
        Returns:
            SlicingConfig: 默认配置
            
        Raises:
            ValueError: 如果打印机ID不存在
        """
        printer = next((p for p in self._printers if p.id == printer_id), None)
        if not printer:
            raise ValueError(f"Unknown printer ID: {printer_id}")
        
        return SlicingConfig(
            layer_height=0.2,
            infill_density=20,
            print_speed=50,
            support_enabled=False,
            adhesion_type="brim"
        )
