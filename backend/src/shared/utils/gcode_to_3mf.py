"""
G-code到3MF文件格式转换工具

3MF(3D Manufacturing Format)是一种基于XML的3D打印文件格式。
对于拓竹打印机,需要将G-code打包为.gcode.3mf格式。

3MF文件结构:
- 本质是ZIP压缩包
- 包含G-code文件和元数据XML
- 符合OPC(Open Packaging Conventions)规范
"""

import os
import zipfile
import uuid
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any
from xml.etree import ElementTree as ET


class GCodeTo3MFConverter:
    """
    G-code到3MF格式转换器
    
    将标准G-code文件转换为拓竹打印机支持的.gcode.3mf格式
    """
    
    # 3MF命名空间
    NAMESPACE_3MF = "http://schemas.microsoft.com/3dmanufacturing/core/2015/02"
    NAMESPACE_BAMBU = "http://bambulab.com/3dmanufacturing/2021/01"
    
    def __init__(self):
        """初始化转换器"""
        pass
    
    def convert(
        self,
        gcode_path: str,
        output_path: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        转换G-code文件为3MF格式
        
        Args:
            gcode_path: 源G-code文件路径
            output_path: 输出3MF文件路径,如果不指定则自动生成
            metadata: 元数据信息,包含打印参数等
            
        Returns:
            str: 生成的3MF文件路径
            
        Raises:
            FileNotFoundError: 如果G-code文件不存在
            ValueError: 如果文件格式不支持
        """
        if not os.path.exists(gcode_path):
            raise FileNotFoundError(f"G-code文件不存在: {gcode_path}")
        
        if not gcode_path.endswith('.gcode'):
            raise ValueError(f"不支持的文件格式: {gcode_path}")
        
        if output_path is None:
            output_path = gcode_path.replace('.gcode', '.gcode.3mf')
        
        metadata = metadata or {}
        
        with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zf:
            self._add_content_types(zf)
            self._add_rels(zf)
            self._add_metadata(zf, metadata)
            self._add_gcode_file(zf, gcode_path)
            self._add_model_xml(zf, metadata)
        
        return output_path
    
    def _add_content_types(self, zf: zipfile.ZipFile) -> None:
        """
        添加[Content_Types].xml文件
        
        定义3MF包中各种文件类型的MIME类型
        
        Args:
            zf: ZIP文件对象
        """
        content_types = f'''<?xml version="1.0" encoding="UTF-8"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
  <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
  <Default Extension="model" ContentType="application/vnd.ms-package.3dmanufacturing-3dmodel+xml"/>
  <Default Extension="gcode" ContentType="text/x.gcode"/>
</Types>'''
        zf.writestr('[Content_Types].xml', content_types)
    
    def _add_rels(self, zf: zipfile.ZipFile) -> None:
        """
        添加_rels/.rels关系文件
        
        定义包中各文件的关联关系
        
        Args:
            zf: ZIP文件对象
        """
        rels = f'''<?xml version="1.0" encoding="UTF-8"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel"
                Target="/3D/3dmodel.model" Id="rel0"/>
  <Relationship Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail"
                Target="/Metadata/plate_1.png" Id="rel1"/>
</Relationships>'''
        zf.writestr('_rels/.rels', rels)
    
    def _add_metadata(
        self,
        zf: zipfile.ZipFile,
        metadata: Dict[str, Any]
    ) -> None:
        """
        添加元数据文件夹
        
        Args:
            zf: ZIP文件对象
            metadata: 元数据信息
        """
        plate_config = self._generate_plate_config(metadata)
        zf.writestr('Metadata/plate_1.gcode', '')
        zf.writestr('Metadata/model_settings.config', plate_config)
    
    def _generate_plate_config(self, metadata: Dict[str, Any]) -> str:
        """
        生成打印板配置文件
        
        Args:
            metadata: 元数据信息
            
        Returns:
            str: 配置文件内容
        """
        layer_height = metadata.get('layer_height', 0.2)
        infill_density = metadata.get('infill_density', 15)
        print_speed = metadata.get('print_speed', 100)
        nozzle_temp = metadata.get('nozzle_temperature', 220)
        bed_temp = metadata.get('bed_temperature', 60)
        material_type = metadata.get('material_type', 'PLA')
        
        config = f'''# Bambu Studio 3D Printing Config
# Generated by GCodeTo3MFConverter
# Date: {datetime.utcnow().isoformat()}

layer_height = {layer_height}
infill_density = {infill_density}%
print_speed = {print_speed}
nozzle_temperature = {nozzle_temp}
bed_temperature = {bed_temp}
filament_type = {material_type}
support_enable = false
'''
        return config
    
    def _add_gcode_file(
        self,
        zf: zipfile.ZipFile,
        gcode_path: str
    ) -> None:
        """
        添加G-code文件到Metadata文件夹
        
        Args:
            zf: ZIP文件对象
            gcode_path: G-code文件路径
        """
        with open(gcode_path, 'r') as f:
            gcode_content = f.read()
        
        zf.writestr('Metadata/plate_1.gcode', gcode_content)
    
    def _add_model_xml(
        self,
        zf: zipfile.ZipFile,
        metadata: Dict[str, Any]
    ) -> None:
        """
        添加3D模型XML文件
        
        Args:
            zf: ZIP文件对象
            metadata: 元数据信息
        """
        model_xml = self._generate_model_xml(metadata)
        zf.writestr('3D/3dmodel.model', model_xml)
    
    def _generate_model_xml(self, metadata: Dict[str, Any]) -> str:
        """
        生成3D模型XML内容
        
        Args:
            metadata: 元数据信息
            
        Returns:
            str: XML内容
        """
        model_id = metadata.get('model_id', str(uuid.uuid4()))
        model_name = metadata.get('model_name', 'Untitled')
        
        root = ET.Element('model')
        root.set('unit', 'millimeter')
        root.set('xmlns', self.NAMESPACE_3MF)
        root.set('xmlns:bambu', self.NAMESPACE_BAMBU)
        root.set('xml:lang', 'en-US')
        
        metadata_elem = ET.SubElement(root, 'metadata')
        metadata_elem.set('name', 'Title')
        metadata_elem.text = model_name
        
        resources = ET.SubElement(root, 'resources')
        
        object_elem = ET.SubElement(resources, 'object')
        object_elem.set('id', '1')
        object_elem.set('type', 'model')
        
        mesh = ET.SubElement(object_elem, 'mesh')
        vertices = ET.SubElement(mesh, 'vertices')
        
        v1 = ET.SubElement(vertices, 'vertex')
        v1.set('x', '0')
        v1.set('y', '0')
        v1.set('z', '0')
        
        v2 = ET.SubElement(vertices, 'vertex')
        v2.set('x', '100')
        v2.set('y', '0')
        v2.set('z', '0')
        
        v3 = ET.SubElement(vertices, 'vertex')
        v3.set('x', '0')
        v3.set('y', '100')
        v3.set('z', '0')
        
        triangles = ET.SubElement(mesh, 'triangles')
        triangle = ET.SubElement(triangles, 'triangle')
        triangle.set('v1', '0')
        triangle.set('v2', '1')
        triangle.set('v3', '2')
        
        build = ET.SubElement(root, 'build')
        item = ET.SubElement(build, 'item')
        item.set('objectid', '1')
        
        tree = ET.ElementTree(root)
        ET.indent(tree, space='  ')
        
        return ET.tostring(root, encoding='unicode', xml_declaration=True)
    
    @staticmethod
    def validate_3mf(file_path: str) -> bool:
        """
        验证3MF文件格式是否正确
        
        Args:
            file_path: 3MF文件路径
            
        Returns:
            bool: 是否为有效的3MF文件
        """
        try:
            with zipfile.ZipFile(file_path, 'r') as zf:
                required_files = ['[Content_Types].xml', '_rels/.rels']
                for required_file in required_files:
                    if required_file not in zf.namelist():
                        return False
                return True
        except (zipfile.BadZipFile, FileNotFoundError):
            return False


def convert_gcode_to_3mf(
    gcode_path: str,
    output_path: Optional[str] = None,
    **kwargs
) -> str:
    """
    便捷函数:转换G-code为3MF格式
    
    Args:
        gcode_path: G-code文件路径
        output_path: 输出文件路径(可选)
        **kwargs: 元数据参数
        
    Returns:
        str: 生成的3MF文件路径
        
    Example:
        >>> convert_gcode_to_3mf(
        ...     'model.gcode',
        ...     layer_height=0.2,
        ...     infill_density=20,
        ...     material_type='PLA'
        ... )
        'model.gcode.3mf'
    """
    converter = GCodeTo3MFConverter()
    return converter.convert(gcode_path, output_path, metadata=kwargs)
