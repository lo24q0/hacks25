"""
G-code到3MF转换器单元测试
"""

import os
import tempfile
import zipfile
from pathlib import Path
from xml.etree import ElementTree as ET

import pytest

from shared.utils.gcode_to_3mf import GCodeTo3MFConverter, convert_gcode_to_3mf


@pytest.fixture
def sample_gcode_file(tmp_path: Path) -> str:
    """
    创建示例G-code文件
    
    Args:
        tmp_path: pytest临时目录
        
    Returns:
        str: G-code文件路径
    """
    gcode_content = """
; Generated by test
G28 ; Home all axes
G1 Z0.3 F3000 ; Move to first layer
M109 S200 ; Wait for hotend temp
M190 S60 ; Wait for bed temp
G1 X10 Y10 E1 ; Print line
M104 S0 ; Turn off hotend
M140 S0 ; Turn off bed
"""
    gcode_file = tmp_path / "test.gcode"
    gcode_file.write_text(gcode_content)
    return str(gcode_file)


@pytest.fixture
def converter() -> GCodeTo3MFConverter:
    """
    创建转换器实例
    
    Returns:
        GCodeTo3MFConverter: 转换器实例
    """
    return GCodeTo3MFConverter()


class TestGCodeTo3MFConverter:
    """
    测试GCodeTo3MFConverter类
    """
    
    def test_convert_basic(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str,
        tmp_path: Path
    ):
        """
        测试基础转换功能
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        
        result = converter.convert(sample_gcode_file, output_path)
        
        assert result == output_path
        assert os.path.exists(output_path)
    
    def test_convert_auto_output_path(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str
    ):
        """
        测试自动生成输出路径
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
        """
        result = converter.convert(sample_gcode_file)
        
        assert result.endswith('.gcode.3mf')
        assert os.path.exists(result)
        
        os.remove(result)
    
    def test_convert_with_metadata(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str,
        tmp_path: Path
    ):
        """
        测试带元数据的转换
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        metadata = {
            'layer_height': 0.2,
            'infill_density': 20,
            'material_type': 'PLA',
            'nozzle_temperature': 210,
            'bed_temperature': 60
        }
        
        result = converter.convert(sample_gcode_file, output_path, metadata)
        
        assert os.path.exists(result)
        
        with zipfile.ZipFile(result, 'r') as zf:
            config_content = zf.read('Metadata/model_settings.config').decode('utf-8')
            assert 'layer_height = 0.2' in config_content
            assert 'infill_density = 20%' in config_content
            assert 'filament_type = PLA' in config_content
    
    def test_convert_file_not_found(self, converter: GCodeTo3MFConverter):
        """
        测试文件不存在时抛出异常
        
        Args:
            converter: 转换器实例
        """
        with pytest.raises(FileNotFoundError):
            converter.convert('nonexistent.gcode')
    
    def test_convert_invalid_format(
        self,
        converter: GCodeTo3MFConverter,
        tmp_path: Path
    ):
        """
        测试不支持的文件格式
        
        Args:
            converter: 转换器实例
            tmp_path: 临时目录
        """
        invalid_file = tmp_path / "test.txt"
        invalid_file.write_text("test")
        
        with pytest.raises(ValueError):
            converter.convert(str(invalid_file))
    
    def test_3mf_structure(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str,
        tmp_path: Path
    ):
        """
        测试生成的3MF文件结构
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        
        converter.convert(sample_gcode_file, output_path)
        
        with zipfile.ZipFile(output_path, 'r') as zf:
            namelist = zf.namelist()
            
            assert '[Content_Types].xml' in namelist
            assert '_rels/.rels' in namelist
            assert 'Metadata/plate_1.gcode' in namelist
            assert 'Metadata/model_settings.config' in namelist
            assert '3D/3dmodel.model' in namelist
    
    def test_3mf_content_types(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str,
        tmp_path: Path
    ):
        """
        测试Content Types文件内容
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        
        converter.convert(sample_gcode_file, output_path)
        
        with zipfile.ZipFile(output_path, 'r') as zf:
            content = zf.read('[Content_Types].xml').decode('utf-8')
            
            assert 'application/vnd.openxmlformats-package.relationships+xml' in content
            assert 'application/vnd.ms-package.3dmanufacturing-3dmodel+xml' in content
    
    def test_3mf_model_xml(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str,
        tmp_path: Path
    ):
        """
        测试3D模型XML文件
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        
        converter.convert(sample_gcode_file, output_path)
        
        with zipfile.ZipFile(output_path, 'r') as zf:
            model_xml = zf.read('3D/3dmodel.model').decode('utf-8')
            root = ET.fromstring(model_xml)
            
            assert root.tag.endswith('model')
            assert root.get('unit') == 'millimeter'
            
            resources = root.find('.//{http://schemas.microsoft.com/3dmanufacturing/core/2015/02}resources')
            assert resources is not None
            
            build = root.find('.//{http://schemas.microsoft.com/3dmanufacturing/core/2015/02}build')
            assert build is not None
    
    def test_validate_3mf_valid(
        self,
        converter: GCodeTo3MFConverter,
        sample_gcode_file: str,
        tmp_path: Path
    ):
        """
        测试验证有效的3MF文件
        
        Args:
            converter: 转换器实例
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        
        converter.convert(sample_gcode_file, output_path)
        
        assert GCodeTo3MFConverter.validate_3mf(output_path) is True
    
    def test_validate_3mf_invalid(self, tmp_path: Path):
        """
        测试验证无效的3MF文件
        
        Args:
            tmp_path: 临时目录
        """
        invalid_file = tmp_path / "invalid.3mf"
        invalid_file.write_text("not a zip file")
        
        assert GCodeTo3MFConverter.validate_3mf(str(invalid_file)) is False
    
    def test_validate_3mf_missing_files(self, tmp_path: Path):
        """
        测试验证缺少必需文件的3MF
        
        Args:
            tmp_path: 临时目录
        """
        incomplete_file = tmp_path / "incomplete.3mf"
        
        with zipfile.ZipFile(str(incomplete_file), 'w') as zf:
            zf.writestr('some_file.txt', 'test')
        
        assert GCodeTo3MFConverter.validate_3mf(str(incomplete_file)) is False


class TestConvertGCodeTo3MF:
    """
    测试便捷函数convert_gcode_to_3mf
    """
    
    def test_convenience_function(self, sample_gcode_file: str, tmp_path: Path):
        """
        测试便捷函数
        
        Args:
            sample_gcode_file: 示例G-code文件路径
            tmp_path: 临时目录
        """
        output_path = str(tmp_path / "output.gcode.3mf")
        
        result = convert_gcode_to_3mf(
            sample_gcode_file,
            output_path,
            layer_height=0.2,
            material_type='PETG'
        )
        
        assert result == output_path
        assert os.path.exists(result)
        
        with zipfile.ZipFile(result, 'r') as zf:
            config = zf.read('Metadata/model_settings.config').decode('utf-8')
            assert 'layer_height = 0.2' in config
            assert 'filament_type = PETG' in config
    
    def test_convenience_function_auto_path(self, sample_gcode_file: str):
        """
        测试便捷函数自动生成路径
        
        Args:
            sample_gcode_file: 示例G-code文件路径
        """
        result = convert_gcode_to_3mf(sample_gcode_file)
        
        assert result.endswith('.gcode.3mf')
        assert os.path.exists(result)
        
        os.remove(result)
