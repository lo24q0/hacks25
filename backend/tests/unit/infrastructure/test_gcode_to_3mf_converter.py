import pytest
import os
import tempfile
import zipfile
import xml.etree.ElementTree as ET
from pathlib import Path

from src.infrastructure.file_conversion.gcode_to_3mf_converter import GCodeTo3MFConverter


class TestGCodeTo3MFConverter:
    """
    G-code到3MF转换器测试
    """

    @pytest.fixture
    def converter(self) -> GCodeTo3MFConverter:
        """
        创建转换器fixture
        
        Returns:
            GCodeTo3MFConverter: 测试用转换器
        """
        return GCodeTo3MFConverter()

    @pytest.fixture
    def sample_gcode(self, tmp_path) -> str:
        """
        创建示例G-code文件
        
        Args:
            tmp_path: pytest临时目录
            
        Returns:
            str: G-code文件路径
        """
        gcode_path = tmp_path / "test.gcode"
        with open(gcode_path, 'w') as f:
            f.write("; Generated by test\n")
            f.write("G28 ; Home all axes\n")
            f.write("M104 S200 ; Set hotend temp\n")
            f.write("M140 S60 ; Set bed temp\n")
            f.write("M109 S200 ; Wait for hotend\n")
            f.write("M190 S60 ; Wait for bed\n")
            f.write("G1 Z0.3 F3000 ; Move to first layer\n")
            for i in range(10):
                f.write(f"G1 X{i} Y{i} E{i*0.1} ; Layer {i}\n")
            f.write("M104 S0 ; Turn off hotend\n")
            f.write("M140 S0 ; Turn off bed\n")
            f.write("G28 X Y ; Home X Y\n")
        return str(gcode_path)

    @pytest.fixture
    def metadata(self) -> dict:
        """
        创建示例元数据
        
        Returns:
            dict: 元数据字典
        """
        return {
            'application': 'BambuStudio',
            'printer_model': 'Bambu Lab H2D',
            'layer_height': 0.2,
            'infill_density': 20,
            'print_speed': 50,
            'support_enabled': False,
            'material_type': 'PLA',
            'nozzle_temperature': 210,
            'bed_temperature': 60
        }

    def test_convert_basic(self, converter, sample_gcode, tmp_path):
        """
        测试基本的G-code到3MF转换
        """
        output_path = tmp_path / "output.3mf"
        
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path)
        )
        
        # 验证文件已创建
        assert os.path.exists(result)
        assert result.endswith('.3mf')
        
        # 验证是有效的ZIP文件
        assert zipfile.is_zipfile(result)

    def test_convert_with_metadata(self, converter, sample_gcode, metadata, tmp_path):
        """
        测试带元数据的转换
        """
        output_path = tmp_path / "output.3mf"
        
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path),
            metadata=metadata
        )
        
        assert os.path.exists(result)
        
        # 验证元数据已写入
        with zipfile.ZipFile(result, 'r') as zf:
            config_content = zf.read('Metadata/model_settings.config')
            assert b'Bambu Lab H2D' in config_content
            assert b'0.2' in config_content  # layer_height
            assert b'20' in config_content   # infill_density

    def test_convert_creates_required_files(self, converter, sample_gcode, tmp_path):
        """
        测试转换器创建所有必需文件
        """
        output_path = tmp_path / "output.3mf"
        
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path)
        )
        
        with zipfile.ZipFile(result, 'r') as zf:
            namelist = zf.namelist()
            
            # 检查必需文件
            assert '[Content_Types].xml' in namelist
            assert '_rels/.rels' in namelist
            assert '3D/3dmodel.model' in namelist
            assert 'Metadata/model_settings.config' in namelist
            assert 'Metadata/plate_1.gcode' in namelist

    def test_convert_preserves_gcode_content(self, converter, sample_gcode, tmp_path):
        """
        测试G-code内容完整保存
        """
        output_path = tmp_path / "output.3mf"
        
        # 读取原始G-code
        with open(sample_gcode, 'r') as f:
            original_gcode = f.read()
        
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path)
        )
        
        # 从3MF中提取G-code并比较
        with zipfile.ZipFile(result, 'r') as zf:
            extracted_gcode = zf.read('Metadata/plate_1.gcode').decode('utf-8')
            assert extracted_gcode == original_gcode

    def test_convert_file_not_found(self, converter, tmp_path):
        """
        测试转换不存在的文件
        """
        output_path = tmp_path / "output.3mf"
        
        with pytest.raises(FileNotFoundError):
            converter.convert(
                gcode_path="/non/existent/file.gcode",
                output_path=str(output_path)
            )

    def test_convert_adds_3mf_extension(self, converter, sample_gcode, tmp_path):
        """
        测试自动添加.3mf扩展名
        """
        output_path = tmp_path / "output"  # 没有扩展名
        
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path)
        )
        
        assert result.endswith('.3mf')
        assert os.path.exists(result)

    def test_create_content_types(self, converter):
        """
        测试创建Content Types文件
        """
        content = converter._create_content_types()
        
        assert b'<?xml version' in content
        assert b'Types' in content
        assert b'application/vnd.ms-package.3dmanufacturing-3dmodel+xml' in content

    def test_create_relationships(self, converter):
        """
        测试创建关系文件
        """
        content = converter._create_relationships()
        
        assert b'<?xml version' in content
        assert b'Relationships' in content
        assert b'3D/3dmodel.model' in content

    def test_create_3d_model(self, converter, metadata):
        """
        测试创建3D模型文件
        """
        content = converter._create_3d_model(metadata)
        
        assert b'<?xml version' in content
        assert b'model' in content
        assert b'BambuStudio' in content

    def test_create_model_settings(self, converter, metadata):
        """
        测试创建模型设置文件
        """
        content = converter._create_model_settings(metadata)
        
        assert b'<?xml version' in content
        assert b'config' in content
        assert b'Bambu Lab H2D' in content
        assert b'0.2' in content

    def test_extract_gcode_from_3mf(self, converter, sample_gcode, tmp_path):
        """
        测试从3MF提取G-code
        """
        # 先创建3MF文件
        mf_path = tmp_path / "test.3mf"
        converter.convert(
            gcode_path=sample_gcode,
            output_path=str(mf_path)
        )
        
        # 提取G-code
        extracted_path = tmp_path / "extracted.gcode"
        result = converter.extract_gcode_from_3mf(
            mf_path=str(mf_path),
            output_path=str(extracted_path)
        )
        
        assert os.path.exists(result)
        
        # 比较内容
        with open(sample_gcode, 'r') as f:
            original = f.read()
        with open(result, 'r') as f:
            extracted = f.read()
        
        assert original == extracted

    def test_extract_gcode_file_not_found(self, converter, tmp_path):
        """
        测试从不存在的3MF文件提取G-code
        """
        output_path = tmp_path / "output.gcode"
        
        with pytest.raises(FileNotFoundError):
            converter.extract_gcode_from_3mf(
                mf_path="/non/existent/file.3mf",
                output_path=str(output_path)
            )

    def test_extract_gcode_no_gcode_in_archive(self, converter, tmp_path):
        """
        测试从没有G-code的3MF文件提取
        """
        # 创建一个空的3MF文件
        mf_path = tmp_path / "empty.3mf"
        with zipfile.ZipFile(mf_path, 'w') as zf:
            zf.writestr('[Content_Types].xml', '<Types/>')
        
        output_path = tmp_path / "output.gcode"
        
        with pytest.raises(RuntimeError, match="No G-code file found"):
            converter.extract_gcode_from_3mf(
                mf_path=str(mf_path),
                output_path=str(output_path)
            )

    def test_validate_3mf_valid(self, converter, sample_gcode, tmp_path):
        """
        测试验证有效的3MF文件
        """
        mf_path = tmp_path / "test.3mf"
        converter.convert(
            gcode_path=sample_gcode,
            output_path=str(mf_path)
        )
        
        assert converter.validate_3mf(str(mf_path)) is True

    def test_validate_3mf_file_not_exists(self, converter):
        """
        测试验证不存在的文件
        """
        assert converter.validate_3mf("/non/existent/file.3mf") is False

    def test_validate_3mf_invalid_zip(self, converter, tmp_path):
        """
        测试验证无效的ZIP文件
        """
        invalid_path = tmp_path / "invalid.3mf"
        with open(invalid_path, 'w') as f:
            f.write("Not a ZIP file")
        
        assert converter.validate_3mf(str(invalid_path)) is False

    def test_validate_3mf_missing_required_files(self, converter, tmp_path):
        """
        测试验证缺少必需文件的3MF
        """
        mf_path = tmp_path / "incomplete.3mf"
        with zipfile.ZipFile(mf_path, 'w') as zf:
            # 只添加部分必需文件
            zf.writestr('[Content_Types].xml', '<Types/>')
            # 缺少 _rels/.rels
        
        assert converter.validate_3mf(str(mf_path)) is False

    def test_validate_3mf_no_model_or_gcode(self, converter, tmp_path):
        """
        测试验证没有模型或G-code的3MF
        """
        mf_path = tmp_path / "no_content.3mf"
        with zipfile.ZipFile(mf_path, 'w') as zf:
            zf.writestr('[Content_Types].xml', '<Types/>')
            zf.writestr('_rels/.rels', '<Relationships/>')
            # 没有.model或.gcode文件
        
        assert converter.validate_3mf(str(mf_path)) is False

    def test_convert_with_thumbnail(self, converter, sample_gcode, tmp_path):
        """
        测试带缩略图的转换
        """
        # 创建假的缩略图
        thumbnail_path = tmp_path / "thumbnail.png"
        with open(thumbnail_path, 'wb') as f:
            # 写入最小的PNG头
            f.write(b'\x89PNG\r\n\x1a\n')
        
        metadata = {
            'printer_model': 'Bambu Lab H2D',
            'thumbnail_path': str(thumbnail_path)
        }
        
        output_path = tmp_path / "output.3mf"
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path),
            metadata=metadata
        )
        
        # 验证缩略图已添加
        with zipfile.ZipFile(result, 'r') as zf:
            assert 'Metadata/plate_1.png' in zf.namelist()
            thumbnail_content = zf.read('Metadata/plate_1.png')
            assert thumbnail_content.startswith(b'\x89PNG')

    def test_convert_without_thumbnail(self, converter, sample_gcode, tmp_path):
        """
        测试没有缩略图的转换
        """
        metadata = {
            'printer_model': 'Bambu Lab H2D',
            'thumbnail_path': '/non/existent/thumbnail.png'
        }
        
        output_path = tmp_path / "output.3mf"
        result = converter.convert(
            gcode_path=sample_gcode,
            output_path=str(output_path),
            metadata=metadata
        )
        
        # 验证缩略图未添加
        with zipfile.ZipFile(result, 'r') as zf:
            assert 'Metadata/plate_1.png' not in zf.namelist()

    def test_concurrent_conversions(self, converter, tmp_path):
        """
        测试并发转换多个文件
        """
        # 创建多个G-code文件
        gcode_files = []
        for i in range(3):
            gcode_path = tmp_path / f"test_{i}.gcode"
            with open(gcode_path, 'w') as f:
                f.write(f"; Test file {i}\n")
                f.write("G28\n")
            gcode_files.append(str(gcode_path))
        
        # 转换所有文件
        results = []
        for i, gcode_path in enumerate(gcode_files):
            output_path = tmp_path / f"output_{i}.3mf"
            result = converter.convert(
                gcode_path=gcode_path,
                output_path=str(output_path)
            )
            results.append(result)
        
        # 验证所有文件都已创建
        for result in results:
            assert os.path.exists(result)
            assert converter.validate_3mf(result)
